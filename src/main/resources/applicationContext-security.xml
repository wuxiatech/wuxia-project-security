<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:s="http://www.springframework.org/schema/security"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans    http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/security  http://www.springframework.org/schema/security/spring-security.xsd"
       default-lazy-init="true">

    <!--unSecurity resource config -->
    <s:http pattern="/commons/**" security="none"/>
    <s:http pattern="/**/favicon.ico" security="none"/>
    <s:http pattern="/auth/**" security="none"/>
    <s:http pattern="/api/**" security="none"/>
    <s:http pattern="/resources/**" security="none"/>
    <!--if 'auto-config = true' then must use 'from-login'.if do use this attribute,then
        it's default value is 'http-basic'(no have session). access-denied-page:throw
        error ,rediretor to the page -->

    <bean id="myWebInvocationPrivilegeEvaluator"
          class="org.springframework.security.web.access.DefaultWebInvocationPrivilegeEvaluator">
        <constructor-arg name="securityInterceptor" ref="securityFilter"/>
    </bean>

    <s:http entry-point-ref="casProcessingFilterEntryPoint"
            auto-config="false" servlet-api-provision="true"
            disable-url-rewriting="true">
        <s:headers>
            <!-- 支持同域名iframe请求 -->
            <s:frame-options policy="SAMEORIGIN"/>
        </s:headers>
        <s:custom-filter position="CAS_FILTER" ref="casAuthenticationFilter"/>
        <s:custom-filter before="FILTER_SECURITY_INTERCEPTOR"
                         ref="securityFilter"/>
        <s:csrf disabled="true"/>
        <s:http-basic/>
        <s:logout logout-url="/logout" success-handler-ref="logoutSuccessHandler"
                  invalidate-session="true" delete-cookies="jsessionid"/>

        <s:session-management
                session-fixation-protection="none">
            <s:concurrency-control max-sessions="10"
                                   error-if-maximum-exceeded="false"/>
        </s:session-management>
        <s:session-management
                session-authentication-strategy-ref="currentControllerStrategy"/>
    </s:http>

    <!-- 开启注解对方法权限验证 -->
    <s:global-method-security secured-annotations="enabled"/>
    <!-- cas -->

    <bean id="casAuthenticationFilter"
          class="org.springframework.security.cas.web.CasAuthenticationFilter">
        <property name="authenticationManager" ref="authenticationManager"/>
        <!-- 认证失败返回的页面(非403错误) -->
        <property name="authenticationFailureHandler" ref="loginFailureHandler"></property>
        <!-- 认证成功返回的页面，此处做了修改，这个类是继续之前的操作。默认的类是设置一个固定的页面 -->
        <property name="authenticationSuccessHandler" ref="loginSuccessHandler"></property>
    </bean>

    <bean id="casProcessingFilterEntryPoint"
          class="cn.wuxia.project.security.handler.support.MyCasAuthenticationEntryPoint">
        <property name="loginUrl" value="${cas.loginUrl}"/>  <!-- 单点登录服务器登录URL -->
        <property name="serviceProperties" ref="serviceProperties"/>
    </bean>

    <bean id="casAuthenticationProvider"
          class="cn.wuxia.project.security.handler.support.MyCasAuthenticationProvider">
        <property name="authenticationUserDetailsService" ref="userDetailsService"/>
        <property name="serviceProperties" ref="serviceProperties"/>
        <property name="ticketValidator" ref="ticketValidator"/>
        <property name="key" value="an_id_for_this_auth_provider_only"/>
    </bean>
    <bean id="ticketValidator"
          class="org.jasig.cas.client.validation.Cas20ProxyTicketValidator">
        <constructor-arg index="0" value="${cas.serverUrl}"/>
        <!-- <property name="proxyCallbackUrl" value="${cas.proxyCallbackUrl}"
            /> -->
        <property name="acceptAnyProxy" value="true"/>
        <!-- <property name="proxyGrantingTicketStorage" ref="proxyStorage" /> -->
    </bean>
    <bean id="serviceProperties" class="org.springframework.security.cas.ServiceProperties">
        <property name="service" value="${cas.service}"/>
        <!-- client服务的URL， j_spring_cas_security_check是security自己定义的一个filter -->
        <property name="sendRenew" value="false"/>
    </bean>

    <!-- cas end -->

    <!-- Authentication Start 调用CAS -->
    <s:authentication-manager alias="authenticationManager"
                              erase-credentials="false">
        <s:authentication-provider ref="casAuthenticationProvider">
        </s:authentication-provider>
    </s:authentication-manager>

    <bean id="userDetailsService"
          class="cn.wuxia.project.security.handler.support.MyCasUserDetailsService">
        <constructor-arg>
            <array>
                <value>casAccountId</value>
            </array>
        </constructor-arg>
    </bean>
    <!-- Authentication End -->

    <!-- handler access control start -->
    <bean id="securityFilter" class="cn.wuxia.project.security.handler.support.MySecurityFilter">
        <property name="authenticationManager" ref="authenticationManager"/>
        <property name="securityMetadataSource">
            <bean id="mySecurityMetadataSource"
                  class="cn.wuxia.project.security.handler.support.MySecurityMetadataSource">
                <property name="systemType" value="${system.type}"/>
            </bean>
        </property>
        <property name="accessDecisionManager">
            <bean class="cn.wuxia.project.security.handler.support.MyAccessDecisionManager">
                <property name="messageSourceHandler" ref="messageSourceHandler"/>
            </bean>
        </property>
    </bean>


    <!-- securtiy access control end -->


    <bean id="loginFailureHandler" class="cn.wuxia.project.security.handler.support.MyLoginFailureHandler">
        <constructor-arg name="defaultFailureUrl" value="${loginFailureUrl:/auth/login}"/>
    </bean>

    <bean id="loginSuccessHandler"
          class="cn.wuxia.project.security.handler.support.MyLoginSuccessHandler">
        <property name="defaultTargetUrl" value="${loginSuccessUrl}"/>
    </bean>
    <!-- login filter configuration End -->

    <!-- logout filter configuration Start -->
    <bean id="logoutSuccessHandler"
          class="cn.wuxia.project.security.handler.support.MyLogoutSuccessHandler">
        <property name="logoutSuccessUrl" value="${logoutSuccessUrl:/auth/login}"/>
        <property name="logoutUrl" value="${cas.logoutUrl}"/>
    </bean>
    <!-- logout filter configuration End -->


    <!-- Session Configuration Start -->
    <bean id="concurrentSessionFilter"
          class="org.springframework.security.web.session.ConcurrentSessionFilter">
        <constructor-arg ref="sessionRegistry"/>
    </bean>

    <bean
            class="org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy">
        <constructor-arg>
            <list>
                <bean
                        class="org.springframework.security.web.authentication.session.ConcurrentSessionControlAuthenticationStrategy">
                    <constructor-arg ref="sessionRegistry"/>
                </bean>
                <bean
                        class="org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy"/>
                <bean
                        class="org.springframework.security.web.authentication.session.RegisterSessionAuthenticationStrategy">
                    <constructor-arg ref="sessionRegistry"/>
                </bean>
            </list>
        </constructor-arg>
    </bean>

    <bean id="sessionRegistry"
          class="org.springframework.security.core.session.SessionRegistryImpl"/>
    <!-- Session Configuration End -->

    <!-- Automatically receives AuthenticationEvent messages -->
    <bean id="loggerListener"
          class="org.springframework.security.authentication.event.LoggerListener"/>
</beans> 